// # 오늘의 알고리즘 👍

// ## 📝 1. 카드 뭉치

// ---

// 코니는 영어 단어가 적힌 카드 뭉치 두 개를 선물로 받았습니다. 코니는 다음과 같은 규칙으로 카드에 적힌 단어들을 사용해 원하는 순서의 단어 배열을 만들 수 있는지 알고 싶습니다.

// - 원하는 카드 뭉치에서 카드를 순서대로 한 장씩 사용합니다.
// - 한 번 사용한 카드는 다시 사용할 수 없습니다.
// - 카드를 사용하지 않고 다음 카드로 넘어갈 수 없습니다.
// - 기존에 주어진 카드 뭉치의 단어 순서는 바꿀 수 없습니다.

// 예를 들어 첫 번째 카드 뭉치에 순서대로 ["i", "drink", "water"], 두 번째 카드 뭉치에 순서대로 ["want", "to"]가 적혀있을 때 ["i", "want", "to", "drink", "water"] 순서의 단어 배열을 만들려고 한다면 첫 번째 카드 뭉치에서 "i"를 사용한 후 두 번째 카드 뭉치에서 "want"와 "to"를 사용하고 첫 번째 카드뭉치에 "drink"와 "water"를 차례대로 사용하면 원하는 순서의 단어 배열을 만들 수 있습니다.

// 문자열로 이루어진 배열 cards1, cards2와 원하는 단어 배열 goal이 매개변수로 주어질 때, cards1과 cards2에 적힌 단어들로 goal를 만들 있다면 "Yes"를, 만들 수 없다면 "No"를 return하는 solution 함수를 완성해주세요.

// ### ▷ 입출력 예

// ```jsx
// solution(["i", "drink", "water"],	["want", "to"],	["i", "want", "to", "drink", "water"]) // "Yes"
// solution(["i", "water", "drink"], ["want", "to"], ["i", "want", "to", "drink", "water"]) // "No"
// ```

// ### ▷ 내 풀이

// ```jsx
// function solution(cards1, cards2, goal) {
//   for (let i = 0; i < goal.length; i++) {
//     if (cards1[0] === goal[i]) {
//       cards1.shift();
//     } else if (cards2[0] === goal[i]) {
//       cards2.shift();
//     } else {
//       return "No";
//     }
//   }
//   return "Yes";
// }
// ```

// ### ▷ 접근 방식
// 단어 카드를 순서대로 사용해서 단어 배열을 만들어야 하기 때문에 카드 뭉치들의 0번째 인덱스에 규칙에 맞는 카드가 있는지 확인하고 있으면 `shift()`매서드를 사용해서 제거해주고 없으면 "No"를 리턴하게 코드를 짰다.

// ---
// >
// 출처: [프로그래머스](https://programmers.co.kr/)
// >
